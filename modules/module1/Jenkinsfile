pipeline {
  agent none

  environment {
    docker_label="nljenkinsagent"
    nlw_host="nlweb.shared"
    api_url="http://${env.nlw_host}:8080"
    zone_id="${ZONE_ID}"
  }

  stages {
    stage ('Prep workspace') {
      agent any
      steps {
        cleanWs()
        script {
          sh "uname -a"
          env.host_ip = sh(script: "getent hosts ${env.nlw_host} | head -n1 | grep -oE '((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])'", returnStdout: true).trim()
          env.agent_name = sh(script: "uname -a | tr -s ' ' | cut -d ' ' -f2", returnStdout: true)
        }
      }
    }
    /*
    stage ('Check/Build Docker Agent') {
      agent any
      steps {
        script {
          imgCount = sh(script: "docker images -a --filter='label=${env.docker_label}' --format='{{.ID}}' | wc -l", returnStdout: true).toInteger()
          if(imgCount < 1)
            docker.build("${env.docker_label}:latest", "--rm --label '${env.docker_label}' -f ./infra/JenkinsBuildAgent.Dockerfile .")
        }
      }
    }
    */
    stage('Attach Worker') {
      agent {
        docker {
          image "${env.docker_label}:latest"
          args "--add-host ${env.nlw_host}:${env.host_ip} -e HOME=${env.WORKSPACE} -e PYTHONUNBUFFERED=1"
        }
      }
      stages {
        stage('Prepare agent') {
          steps {
            sh 'neoload --version'
            withCredentials([string(credentialsId: 'NLW_TOKEN', variable: 'NLW_TOKEN')]) {
              sh "neoload login --url ${env.api_url} $NLW_TOKEN"
            }
          }
        }
        stage('Prepare Neoload test') {
          steps {
            script {
              def zone_id = env.zone_id
              if(zone_id.trim().toLowerCase().equals("null")) zone_id = ""
              if(zone_id.trim().length() < 1) // dynamically pick a zone
                zone_id = sh(script: "neoload zones | jq '[.[]|select((.controllers|select(.[].status==\"AVAILABLE\")|length>0) and (.loadgenerators|select(.[].status==\"AVAILABLE\")|length>0) and (.type==\"STATIC\"))][0] | .id' -r", returnStdout: true).trim()

              sh "neoload test-settings --zone ${zone_id} --lgs 1 --scenario sanityScenario createorpatch 'example-Jenkins-module1'"
            }
            sh "neoload status"
            sh "neoload project --path tests/neoload_projects/example_1/ upload"
          }
        }
        stage('Run Test') {
          steps {
            sh "neoload run --name \"${env.JOB_NAME}-${env.BUILD_NUMBER}-${env.agent_name}\""
          }
          post {
            always {
              sh "neoload test-results junitsla"
              sh "sed -i 's/\\<br\\/\\>/\\n/g' junit-sla.xml"
              junit 'junit-sla.xml'
            }
          }
        }
      }
    }
  }
}
